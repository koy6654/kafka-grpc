networks:
    kafka_network:

volumes:
    Kafka00:
        driver: local
    Kafka01:
        driver: local
    Kafka02:
        driver: local

services:
    ##Kafka 00
    Kafka00Service: # Broker
        image: bitnami/kafka:3.5.1-debian-11-r44
        restart: unless-stopped
        container_name: Kafka00Container
        ports:
            - '9092:9094' # Host port (9092) : Container port (9094)
        environment:
            - KAFKA_CFG_NODE_ID=${KAFKA_CFG_NODE_ID_BROKER_1} # Broker 고유 ID
            - KAFKA_KRAFT_CLUSTER_ID=${KAFKA_KRAFT_CLUSTER_ID} # Cluster 고유 식별자 (common)
            - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=${KAFKA_CFG_CONTROLLER_QUORUM_VOTERS} # 각 Broker에 대해 컨트롤러 역할 후보 투표 <broker_id>@<broker_host>:<controller_port>
            - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=${KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE} # Broker 자동 토픽 생성 허용 옵션
            - ALLOW_PLAINTEXT_LISTENER=${ALLOW_PLAINTEXT_LISTENER} # Broker plaintext(프로토콜) listen 허용 여부
            - KAFKA_CFG_LISTENERS=${KAFKA_CFG_LISTENERS} # Broker가 수신할 수 있는 요청의 프로토콜 & 포트 리스너 설정 (PLAINTEXT: 클라이언트 애플리케이션과 통신, CONTROLLER: 클러스터 내부 안정성 & 일관성 유지, EXTERNAL: 외부 클라이언트와 통신)
            - KAFKA_CFG_ADVERTISED_LISTENERS=${KAFKA_LISTENER_1}://${KAFKA_BROKER_HOST_BROKER_1}:9092,${KAFKA_LISTENER_3}://127.0.0.1:9092 # Broker가 리스너 별로 클라이언트에 반환하는 호스트, 포트 정보 설정 <listener_name>://<host_name:port>
            - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=${KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP} # 리스너가 사용하는 보안 프로토콜을 매핑
            - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=${KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR} # Consumer 오프셋 토픽을 N개의 브로커에 백업&복제함
            - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=${KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR} # 트랜잭션 상태 로그를 N개의 브로커에 백업&복제함
            - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=${KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR} # 트랜잭션 상태 로그의 쓰기 작업이 성공하기 위해 최소한 필요한 동기화된 복제본의 수
            - KAFKA_CFG_PROCESS_ROLES=${KAFKA_CFG_PROCESS_ROLES} # Broker가 수행할 역할을 정의
            - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=${KAFKA_LISTENER_2} # 컨트롤러가 사용할 리스너의 이름을 정의
        networks:
            - kafka_network
        volumes:
            - 'Kafka00:/bitnami/kafka'
    ##Kafka 01
    Kafka01Service:
        image: bitnami/kafka:3.5.1-debian-11-r44
        restart: always
        container_name: Kafka01Container
        ports:
            - '9093:9094'
        environment:
            - KAFKA_CFG_NODE_ID=${KAFKA_CFG_NODE_ID_BROKER_2}
            - KAFKA_KRAFT_CLUSTER_ID=${KAFKA_KRAFT_CLUSTER_ID}
            - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=${KAFKA_CFG_CONTROLLER_QUORUM_VOTERS}
            - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=${KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE}
            - ALLOW_PLAINTEXT_LISTENER=${ALLOW_PLAINTEXT_LISTENER}
            - KAFKA_CFG_LISTENERS=${KAFKA_CFG_LISTENERS}
            - KAFKA_CFG_ADVERTISED_LISTENERS=${KAFKA_LISTENER_1}://${KAFKA_BROKER_HOST_BROKER_2}:9092,${KAFKA_LISTENER_3}://127.0.0.1:9093
            - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=${KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP}
            - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=${KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR}
            - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=${KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR}
            - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=${KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR}
            - KAFKA_CFG_PROCESS_ROLES=${KAFKA_CFG_PROCESS_ROLES}
            - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=${KAFKA_LISTENER_2}
        networks:
            - kafka_network
        volumes:
            - 'Kafka01:/bitnami/kafka'
    ##Kafka 02
    Kafka02Service:
        image: bitnami/kafka:3.5.1-debian-11-r44
        restart: always
        container_name: Kafka02Container
        ports:
            - '9094:9094'
        environment:
            - KAFKA_CFG_NODE_ID=${KAFKA_CFG_NODE_ID_BROKER_3}
            - KAFKA_KRAFT_CLUSTER_ID=${KAFKA_KRAFT_CLUSTER_ID}
            - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=${KAFKA_CFG_CONTROLLER_QUORUM_VOTERS}
            - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=${KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE}
            - ALLOW_PLAINTEXT_LISTENER=${ALLOW_PLAINTEXT_LISTENER}
            - KAFKA_CFG_LISTENERS=${KAFKA_CFG_LISTENERS}
            - KAFKA_CFG_ADVERTISED_LISTENERS=${KAFKA_LISTENER_1}://${KAFKA_BROKER_HOST_BROKER_3}:9092,EXTERNAL://127.0.0.1:9094
            - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=${KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP}
            - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=${KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR}
            - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=${KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR}
            - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=${KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR}
            - KAFKA_CFG_PROCESS_ROLES=${KAFKA_CFG_PROCESS_ROLES}
            - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=${KAFKA_LISTENER_2}
        networks:
            - kafka_network
        volumes:
            - 'Kafka02:/bitnami/kafka'

    # Kafka UI 관리자 (localhost:8080)
    KafkaWebUiService:
        image: provectuslabs/kafka-ui:latest
        restart: always
        container_name: KafkaWebUiContainer
        ports:
            - '8080:8080'
        environment:
            - KAFKA_CLUSTERS_0_NAME=Local-Kraft-Cluster
            - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=Kafka00Service:9092,Kafka01Service:9092,Kafka02Service:9092
            - DYNAMIC_CONFIG_ENABLED=true
            - KAFKA_CLUSTERS_0_AUDIT_TOPICAUDITENABLED=true
            - KAFKA_CLUSTERS_0_AUDIT_CONSOLEAUDITENABLED=true
        depends_on:
            - Kafka00Service
            - Kafka01Service
            - Kafka02Service
        networks:
            - kafka_network
